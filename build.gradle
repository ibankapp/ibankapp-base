/*
 * iBankApp
 *
 * License : Apache License,Version 2.0, January 2004
 *
 * See the LICENSE file in English or LICENSE.zh_CN in chinese
 * in the root directory or <http://www.apache.org/licenses/>.
 */


subprojects {

    group 'org.ibankapp'
    version '1.0.0-beta.5'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    checkstyleMain {
        enabled = JavaVersion.current() != JavaVersion.VERSION_1_6
    }

    checkstyleTest {
        enabled = JavaVersion.current() != JavaVersion.VERSION_1_6
    }

    javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            links "http://docs.oracle.com/javase/8/docs/api"
        }
    }

    checkstyle {
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            toolVersion = "8.0"
        } else {
            toolVersion = "6.5"
        }
        configFile = rootProject.file('config/checkstyle/google_style.xml')
        configProperties = [configdir: rootProject.file('config')]
    }

    configurations {
        jacoco
        jacocoRuntime
    }

    dependencies {
        jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.7.9', classifier: 'nodeps'
        jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.7.9', classifier: 'runtime'
    }

    task instrument(dependsOn: ['classes']) {
        ext.outputDir = buildDir.path + '/classes-instrumented'
        doLast {
            ant.taskdef(name: 'instrument',
                    classname: 'org.jacoco.ant.InstrumentTask',
                    classpath: configurations.jacoco.asPath)
            ant.instrument(destdir: outputDir) {
                fileset(dir: sourceSets.main.output.classesDir)
            }
        }
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(instrument)) {
            tasks.withType(Test) {
                doFirst {
                    systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
                    classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
                }
            }
        }
    }

    task report(dependsOn: ['instrument', 'test']) {
        doLast {
            ant.taskdef(name: 'report',
                    classname: 'org.jacoco.ant.ReportTask',
                    classpath: configurations.jacoco.asPath)
            ant.report() {
                executiondata {
                    ant.file(file: buildDir.path + '/jacoco/tests.exec')
                }
                structure(name: 'Example') {
                    classfiles {
                        fileset(dir: sourceSets.main.output.classesDir)
                    }
                    sourcefiles {
                        fileset(dir: 'src/main/java')
                    }
                }
                html(destdir: buildDir.path + '/reports/jacoco')
                xml(destfile: buildDir.path + '/reports/jacoco/jacocoTestReport.xml')
            }
        }
    }

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/groups/public"
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    if (this.hasProperty('ossrhUsername')) {

        apply plugin: 'signing'

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'ibankapp Base'
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description 'the base moudle of ibankapp series'
                        url 'http://www.ibankapp.org'

                        scm {
                            connection 'scm:git:git://github.com/ibankapp/ibankapp-base.git'
                            developerConnection 'scm:git:ssh://github.com:ibankapp/ibankapp-base.git'
                            url 'https://github.com/ibankapp/ibankapp-base/tree/master'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'codelder'
                                name 'dawndew'
                                email 'codelder@ibankapp.org'
                            }
                            developer {
                                id 'esailor'
                                name 'esailor'
                                email 'liulj@ibankapp.org'
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign configurations.archives

        }
    }

    check.dependsOn report

}